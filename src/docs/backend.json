{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the FinTrack AI application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The role of the user.",
          "enum": ["Owner", "Admin", "Accountant", "Viewer"]
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "BankAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BankAccount",
      "type": "object",
      "description": "Represents a bank account associated with a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the BankAccount entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N BankAccount)"
        },
        "accountName": {
          "type": "string",
          "description": "Name of the bank account."
        },
        "accountNumber": {
          "type": "string",
          "description": "Account number of the bank account."
        },
        "bankName": {
          "type": "string",
          "description": "Name of the bank."
        }
      },
      "required": [
        "id",
        "userId",
        "accountName",
        "accountNumber",
        "bankName"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a financial transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Transaction entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Transaction)"
        },
        "bankAccountId": {
          "type": "string",
          "description": "Reference to BankAccount. (Relationship: BankAccount 1:N Transaction)"
        },
        "date": {
          "type": "string",
          "description": "Date of the transaction.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the transaction."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction."
        },
        "accountId": {
          "type": "string",
          "description": "Reference to Account. (Relationship: Account 1:N Transaction)"
        },
        "projectId": {
            "type": "string",
            "description": "Optional reference to a Project."
        }
      },
      "required": [
        "id",
        "userId",
        "date",
        "description",
        "amount",
        "accountId"
      ]
    },
    "Account": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Account",
      "type": "object",
      "description": "Represents an account in the chart of accounts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Account entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Account)"
        },
        "name": {
          "type": "string",
          "description": "Name of the account."
        },
        "description": {
          "type": "string",
          "description": "Description of the account."
        },
        "type": {
          "type": "string",
          "description": "The type of the account.",
          "enum": ["Asset", "Liability", "Equity", "Income", "Expense"]
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "type"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer or client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Customer entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Customer)"
        },
        "name": {
          "type": "string",
          "description": "Name of the customer."
        },
        "email": {
          "type": "string",
          "description": "Email address of the customer.",
          "format": "email"
        },
        "address": {
          "type": "string",
          "description": "Physical or mailing address of the customer."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the customer."
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "email"
      ]
    },
    "Vendor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Vendor",
      "type": "object",
      "description": "Represents a vendor or supplier.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Vendor entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Vendor)"
        },
        "name": {
          "type": "string",
          "description": "Name of the vendor."
        },
        "email": {
          "type": "string",
          "description": "Email address of the vendor.",
          "format": "email"
        },
        "address": {
          "type": "string",
          "description": "Physical or mailing address of the vendor."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the vendor."
        }
      },
      "required": [
        "id",
        "userId",
        "name"
      ]
    },
    "Receipt": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Receipt",
      "description": "Represents the data extracted from a receipt image.",
      "type": "object",
      "properties": {
        "vendorName": {
          "type": "string",
          "description": "The name of the vendor or store from the receipt."
        },
        "transactionDate": {
          "type": "string",
          "description": "The date of the transaction in YYYY-MM-DD format.",
          "format": "date"
        },
        "description": {
          "type": "string",
          "description": "A short description of the items purchased."
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the transaction."
        }
      },
      "required": ["vendorName", "transactionDate", "description", "totalAmount"]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "description": "Represents a project for tracking income and expenses.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Project)"
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the project."
        },
        "status": {
            "type": "string",
            "description": "The current status of the project.",
            "enum": ["Not Started", "In Progress", "Completed", "On Hold"]
        },
        "budget": {
            "type": "number",
            "description": "The allocated budget for the project."
        }
      },
      "required": ["id", "userId", "name", "status"]
    },
    "UserRole": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserRole",
      "description": "Represents the role of a user within a team or workspace.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserRole, typically the user's UID."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "role": {
            "type": "string",
            "description": "The role assigned to the user.",
            "enum": ["Owner", "Admin", "Accountant", "Viewer"]
        }
      },
      "required": ["id", "email", "role"]
    },
    "Invoice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Invoice",
      "description": "Represents an invoice sent to a customer.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Invoice entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Invoice)"
        },
        "customerId": {
          "type": "string",
          "description": "Reference to the Customer being invoiced."
        },
        "invoiceNumber": {
          "type": "string",
          "description": "A unique sequential number for the invoice."
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the invoice was issued."
        },
        "dueDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the invoice payment is due."
        },
        "status": {
          "type": "string",
          "description": "The current status of the invoice.",
          "enum": ["Draft", "Sent", "Paid", "Overdue", "Void"]
        },
        "lineItems": {
            "type": "array",
            "items": {
                "$ref": "#/entities/InvoiceLineItem"
            }
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the invoice."
        }
      },
      "required": ["id", "userId", "customerId", "invoiceNumber", "issueDate", "dueDate", "status", "totalAmount"]
    },
    "InvoiceLineItem": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Invoice Line Item",
        "description": "Represents a single line item on an invoice.",
        "type": "object",
        "properties": {
            "description": {
                "type": "string"
            },
            "quantity": {
                "type": "number"
            },
            "unitPrice": {
                "type": "number"
            },
            "total": {
                "type": "number"
            }
        },
        "required": ["description", "quantity", "unitPrice", "total"]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "description": "Represents a product in the inventory for the POS system.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the product."
        },
        "price": {
          "type": "number",
          "description": "The selling price of the product."
        },
        "quantityInStock": {
          "type": "number",
          "description": "The quantity of the product available in stock."
        },
        "imageUrl": {
          "type": "string",
          "format": "uri",
          "description": "URL for the product image."
        }
      },
      "required": ["id", "userId", "name", "price", "quantityInStock"]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "description": "Represents a single POS sale transaction.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Sale."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Sale)"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time of the sale."
        },
        "lineItems": {
            "type": "array",
            "items": {
                "$ref": "#/entities/Product"
            }
        },
        "subtotal": {
          "type": "number",
          "description": "The subtotal before tax."
        },
        "tax": {
          "type": "number",
          "description": "The total tax amount."
        },
        "total": {
          "type": "number",
          "description": "The final total amount."
        }
      },
      "required": ["id", "userId", "date", "lineItems", "subtotal", "tax", "total"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. This path uses path-based ownership for user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user.  This is the `request.auth.uid`."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores inventory products for a specific user's POS system.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
       {
        "path": "/users/{userId}/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores POS sale records for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "saleId",
              "description": "The unique identifier for the sale."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/invoices/{invoiceId}",
        "definition": {
          "entityName": "Invoice",
          "schema": {
            "$ref": "#/backend/entities/Invoice"
          },
          "description": "Stores invoice information for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "invoiceId",
              "description": "The unique identifier for the invoice."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/bankAccounts/{bankAccountId}",
        "definition": {
          "entityName": "BankAccount",
          "schema": {
            "$ref": "#/backend/entities/BankAccount"
          },
          "description": "Stores bank account information for a specific user. Path-based ownership is implemented.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "bankAccountId",
              "description": "The unique identifier for the bank account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transaction data associated with a specific bank account. Path-based ownership is implemented.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier for the transaction."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/accounts/{accountId}",
        "definition": {
          "entityName": "Account",
          "schema": {
            "$ref": "#/backend/entities/Account"
          },
          "description": "Stores chart of accounts entries created by a specific user. Path-based ownership is implemented.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "accountId",
              "description": "The unique identifier for the account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information for a specific user. Path-based ownership is implemented.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "customerId",
              "description": "The unique identifier for the customer."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/vendors/{vendorId}",
        "definition": {
          "entityName": "Vendor",
          "schema": {
            "$ref": "#/backend/entities/Vendor"
          },
          "description": "Stores vendor information for a specific user. Path-based ownership is implemented.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "vendorId",
              "description": "The unique identifier for the vendor."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/userRoles/{userRoleId}",
        "definition": {
          "entityName": "UserRole",
          "schema": {
            "$ref": "#/backend/entities/UserRole"
          },
          "description": "Stores user roles for a specific user's team.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (team owner)."
            },
            {
              "name": "userRoleId",
              "description": "The unique identifier for the team member's role."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily maintainable data model for the FinTrack AI application, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It leverages structural segregation by using dedicated collections for each entity type, and consistent access modeling via path-based ownership for user-related data. \n\nAuthorization Independence is achieved by associating each BankAccount, Transaction, Account, Customer, and Vendor with the userId via hierarchical paths. This eliminates the need for `get()` calls in security rules, enabling atomic operations and improving debuggability.\n\nThe structure supports the required QAPs by ensuring that list operations can be secured effectively. Since all documents within a collection share the same security requirements (e.g., only the user can access their own data), rules can be written to allow listing only if `request.auth.uid == userId` without needing to filter based on document content."
  }
}

    