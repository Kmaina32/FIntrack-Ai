/**
 * @fileoverview Firestore Security Rules for FinTrack AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data,
 * including bank accounts, transactions, accounts, and customers.  No cross-user data access is allowed except
 * through explicitly defined shared access patterns (currently not implemented).
 *
 * Data Structure:
 * The Firestore data is structured hierarchically under the `/users/{userId}` path.  Each user has their own
 * collections for `bankAccounts`, `transactions`, `accounts`, and `customers`. This structure facilitates
 * secure and efficient data access based on user identity.
 *
 * Key Security Decisions:
 * - User data is strictly segregated.  Users can only access data under their own user ID.
 * - Listing other users is explicitly denied.
 * - The rules prioritize security and assume data shapes are flexible for prototyping.  Minimal data validation
 *   is performed.
 *
 * Denormalization for Authorization:
 * The data structure is designed to avoid `get()` calls by embedding the `userId` in the path. This enables
 * direct authorization checks based on the path without needing to read additional documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their profile with a matching userId.
     * @deny (create) Authenticated user attempts to create a profile for a different userId.
     * @allow (get) Authenticated user reads their profile.
     * @deny (get) Authenticated user attempts to read another user's profile.
     * @allow (update) Authenticated user updates their profile.
     * @deny (update) Authenticated user attempts to update another user's profile.
     * @allow (delete) Authenticated user deletes their profile.
     * @deny (delete) Authenticated user attempts to delete another user's profile.
     * @principle Enforces document ownership for all operations on a user's profile.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their bank accounts.
     * @path /users/{userId}/bankAccounts/{bankAccountId}
     * @allow (create) Authenticated user creates a bank account under their user ID.
     * @deny (create) Authenticated user attempts to create a bank account under another user's ID.
     * @allow (get) Authenticated user reads their bank account details.
     * @deny (get) Authenticated user attempts to read another user's bank account details.
     * @allow (update) Authenticated user updates their bank account details.
     * @deny (update) Authenticated user attempts to update another user's bank account details.
     * @allow (delete) Authenticated user deletes their bank account.
     * @deny (delete) Authenticated user attempts to delete another user's bank account.
     * @principle Enforces document ownership for all operations on a bank account.
     */
    match /users/{userId}/bankAccounts/{bankAccountId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) Authenticated user creates a transaction under their user ID.
     * @deny (create) Authenticated user attempts to create a transaction under another user's ID.
     * @allow (get) Authenticated user reads their transaction details.
     * @deny (get) Authenticated user attempts to read another user's transaction details.
     * @allow (update) Authenticated user updates their transaction details.
     * @deny (update) Authenticated user attempts to update another user's transaction details.
     * @allow (delete) Authenticated user deletes their transaction.
     * @deny (delete) Authenticated user attempts to delete another user's transaction.
     * @principle Enforces document ownership for all operations on a transaction.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their accounts (chart of accounts).
     * @path /users/{userId}/accounts/{accountId}
     * @allow (create) Authenticated user creates an account under their user ID.
     * @deny (create) Authenticated user attempts to create an account under another user's ID.
     * @allow (get) Authenticated user reads their account details.
     * @deny (get) Authenticated user attempts to read another user's account details.
     * @allow (update) Authenticated user updates their account details.
     * @deny (update) Authenticated user attempts to update another user's account details.
     * @allow (delete) Authenticated user deletes their account.
     * @deny (delete) Authenticated user attempts to delete another user's account.
     * @principle Enforces document ownership for all operations on an account.
     */
    match /users/{userId}/accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their customers.
     * @path /users/{userId}/customers/{customerId}
     * @allow (create) Authenticated user creates a customer under their user ID.
     * @deny (create) Authenticated user attempts to create a customer under another user's ID.
     * @allow (get) Authenticated user reads their customer details.
     * @deny (get) Authenticated user attempts to read another user's customer details.
     * @allow (update) Authenticated user updates their customer details.
     * @deny (update) Authenticated user attempts to update another user's customer details.
     * @allow (delete) Authenticated user deletes their customer.
     * @deny (delete) Authenticated user attempts to delete another user's customer.
     * @principle Enforces document ownership for all operations on a customer.
     */
    match /users/{userId}/customers/{customerId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, based on the userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource AND the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}