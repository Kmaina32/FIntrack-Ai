/**
 * @fileoverview Firestore Security Rules for FinTrack AI application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their own data,
 * and no access to other users' data.  Rules leverage path-based authorization and avoid complex `get()` calls.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.  Subcollections are used to store
 * related entities like bank accounts, transactions, accounts, customers, and vendors.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete data within their own user ID space.
 * - Listing of user subcollections is restricted to the owner.
 * - The rules prioritize security and assume data integrity.  Data validation is kept minimal to enable rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root match to prevent unauthorized access to the entire database.
     * @path /databases/{database}/documents
     * @allow NONE
     * @deny All requests to the root path are denied to enforce security.
     * @principle Prevents accidental open access by requiring explicit rules for all paths.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow create (create) if request.auth.uid == userId. Allows a user to create their own profile.
     * @allow get (get) if isSignedIn() && isOwner(userId). Allows a user to get their own profile.
     * @allow update (update) if isSignedIn() && isOwner(userId). Allows a user to update their own profile.
     * @allow delete (delete) if isSignedIn() && isOwner(userId). Allows a user to delete their own profile.
     * @deny create (create) if request.auth.uid != userId. Prevents a user from creating a profile with a different ID.
     * @principle Enforces user-ownership and prevents unauthorized profile creation or modification.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/bankAccounts/{bankAccountId} collection.
     * @path /users/{userId}/bankAccounts/{bankAccountId}
     * @allow create (create) if isSignedIn() && isOwner(userId). Allows a user to create bank accounts in their own profile.
     * @allow get (get) if isSignedIn() && isOwner(userId). Allows a user to read bank accounts in their own profile.
     * @allow update (update) if isSignedIn() && isOwner(userId). Allows a user to update bank accounts in their own profile.
     * @allow delete (delete) if isSignedIn() && isOwner(userId). Allows a user to delete bank accounts in their own profile.
     * @deny create (create) if request.auth.uid != userId. Prevents creating bank accounts in other user profiles.
     * @principle Enforces user-ownership for bank accounts.
     */
    match /users/{userId}/bankAccounts/{bankAccountId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow create (create) if isSignedIn() && isOwner(userId). Allows a user to create transactions in their own profile.
     * @allow get (get) if isSignedIn() && isOwner(userId). Allows a user to read transactions in their own profile.
     * @allow update (update) if isSignedIn() && isOwner(userId). Allows a user to update transactions in their own profile.
     * @allow delete (delete) if isSignedIn() && isOwner(userId). Allows a user to delete transactions in their own profile.
     * @deny create (create) if request.auth.uid != userId. Prevents creating transactions in other user profiles.
     * @principle Enforces user-ownership for transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/accounts/{accountId} collection.
     * @path /users/{userId}/accounts/{accountId}
     * @allow create (create) if isSignedIn() && isOwner(userId). Allows a user to create accounts in their own profile.
     * @allow get (get) if isSignedIn() && isOwner(userId). Allows a user to read accounts in their own profile.
     * @allow update (update) if isSignedIn() && isOwner(userId). Allows a user to update accounts in their own profile.
     * @allow delete (delete) if isSignedIn() && isOwner(userId). Allows a user to delete accounts in their own profile.
     * @deny create (create) if request.auth.uid != userId. Prevents creating accounts in other user profiles.
     * @principle Enforces user-ownership for accounts.
     */
    match /users/{userId}/accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/customers/{customerId} collection.
     * @path /users/{userId}/customers/{customerId}
     * @allow create (create) if isSignedIn() && isOwner(userId). Allows a user to create customers in their own profile.
     * @allow get (get) if isSignedIn() && isOwner(userId). Allows a user to read customers in their own profile.
     * @allow update (update) if isSignedIn() && isOwner(userId). Allows a user to update customers in their own profile.
     * @allow delete (delete) if isSignedIn() && isOwner(userId). Allows a user to delete customers in their own profile.
     * @deny create (create) if request.auth.uid != userId. Prevents creating customers in other user profiles.
     * @principle Enforces user-ownership for customers.
     */
    match /users/{userId}/customers/{customerId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/vendors/{vendorId} collection.
     * @path /users/{userId}/vendors/{vendorId}
     * @allow create (create) if isSignedIn() && isOwner(userId). Allows a user to create vendors in their own profile.
     * @allow get (get) if isSignedIn() && isOwner(userId). Allows a user to read vendors in their own profile.
     * @allow update (update) if isSignedIn() && isOwner(userId). Allows a user to update vendors in their own profile.
     * @allow delete (delete) if isSignedIn() && isOwner(userId). Allows a user to delete vendors in their own profile.
     * @deny create (create) if request.auth.uid != userId. Prevents creating vendors in other user profiles.
     * @principle Enforces user-ownership for vendors.
     */
    match /users/{userId}/vendors/{vendorId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}